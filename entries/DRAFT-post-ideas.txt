- What's next for Similar Songs?
  - Integrate Spotify and/or Apple Music players
  - RSS feed for new additions
  - Filter/search on the page

- Backing everything up on SSDs, storing them in a fireproof folder, using rsync
- JavaScriptCore, Scriptable, little utilities, useful for a Swiss Army knife app
- SiteGenerator
- Vision framework
  
- Graphics in javascript:
  - https://play.ertdfgcvb.xyz/
  - https://www.dwitter.net/
  - http://pixelverse.org/experiments/natsukashii/
  - https://bbcmic.ro/?experimental=true&#

- Follow-up to FormulaGraph: this project uses a different solution to graph arbitrary formulas: it compiles the formula into a GL shader which can then run on the GPU for every pixel. It results in a high performance experience. https://github.com/evanw/theta
  - Made by one of the co-founders of Figma
  - Interesting source files include:
    - Here's where the formula is "compiled" into a function called eq: https://github.com/evanw/theta/blob/master/src/core/compiler.sk
    - Here's where eq is used to compute fragColor: https://github.com/evanw/theta/blob/master/glslx/shaders.glslx
  - Interesting example formulas:
    - http://thetamath.com/app/abs(x%5E(2)-1)=abs(y%5E(2)-1)
    - http://thetamath.com/app/sin(x-cosπy)≤sin(y+cosπx)
    - http://thetamath.com/app/sin(2lnr+θ)≥0
    - http://thetamath.com/app/cos(x-sin2y)≤cos(y-sin2x)
    - http://thetamath.com/app/x-sinπy≤y+sinπx
    - More listed here: https://github.com/evanw/theta/blob/master/src/core/app.sk

- Graphs in JavaScript: https://github.com/vega/vega-lite
- Syntax highlighting in JavaScript: https://prismjs.com/
- PalmOS emulator: https://cloudpilot-emu.github.io/app/#/tab/emulation
  
- Make your own Muncher game (input a file, get a munchers game; have a listing of sample ones)

- 101 Zen Stories, put in a maze like memalign dungeon: https://nkanaev.com/zen101/en/

- Sporcle: 151 Pokemon

- Make memes, mock up UI in Keynote

- Make font in js: https://brutalita.com/

- Similar Songs Jukebox: use Spotify, Apple Music, or YouTube to play similar songs back-to-back
  
- More PICO-8 games
  - Holiday Jumper by zep: https://www.lexaloffle.com/bbs/?tid=45856
  - https://www.lexaloffle.com/bbs/?tid=46495
  - Tomb of G'Nir (hard platformer): https://www.lexaloffle.com/bbs/?tid=31258#comments
  - UFO Swamp Odyssey: https://www.lexaloffle.com/bbs/?tid=38153#playing - very charming and fun
  - https://www.lexaloffle.com/bbs/?tid=34047#playing - Another Paranoid Cactus game. Turn-based strategy called "Shadows of Dunwich 2.0". Good example of the mechanic but I found it tedious after a few rounds.
  - Putrid S4nd: https://abhimonk.itch.io/putrid-s4nd - shoot-em-up with roguelike elements
  - https://nusan.itch.io/flooded-caves
  - https://www.lexaloffle.com/bbs/?tid=50846#playing
  - https://www.lexaloffle.com/bbs/?tid=2514#playing
  - Space Trader: https://www.lexaloffle.com/bbs/?tid=44016
      - This guy's website: https://benjdev.fr/
      - This guy's github: https://github.com/cyberbenj
      - Reddit post: https://www.reddit.com/r/pico8/comments/ounyxi/space_trader/
   - https://sic-benson.itch.io/runaways 
   - https://cheesemug.itch.io/breakthrough
   - https://joeamericagayms.itch.io/rpg-scoll-1k
   - https://unikotoast.itch.io/buns-bunny-survivor
   - https://tommulgrew.itch.io/whiplash-taxi-co

- JavaScript games:
  - https://github.com/DennisBengs/envisionator
    - https://donitz.itch.io/envisionator
    - This is the game with a robot you control by giving movement commands
  - https://github.com/DennisBengs/retrohaunt (by the same guy as Envisionator)
  - http://lalo.li/ddd/
  - http://lalo.li/lsd/
  - Chroma Incident: https://js13kgames.com/entries/the-chroma-incident https://github.com/Rybar/js13k2018
    - https://js13kgames.com/games/greeble/index.html
      - I like the idea of a robot needing to rebuild itself but the implementation is buggy (too easy to get stuck and have to reload) and the game feels too incomplete
  - Space Garden: https://js13kgames.com/entries/space-garden ; Relaxing, a lot more fun than Asteroids, but no win/end condition
  - https://www.lessmilk.com/almost-pong/
  - Simplified Quake: https://phoboslab.org/q1k3/
  
- https://1j01.github.io/pbp2d/
  - New URL: https://1j01.github.io/pbj-sandbox/

- Free game assets: https://www.kenney.nl/assets/

- Ray tracing
  - https://github.com/iechevarria/ray-tracer-js
  - add a rectangle (which I think just combines two triangles - see how the included scene makes its walls)
  - add a more complex shape: cylinder or torus

- https://freeicons.io/

- https://cube.zxh.io/
  - backed up in ~/rubikscube
  - add some patterns

- Expand on what I noted in 00020-product-reviews.txt about reading and writing outside of school (pressures of grades, learning how to think, pursuing things that are more interesting than the curriculum, etc)
  - Why I wanted to write about Tim's Vermeer but didn't want to write about so many books we read in school

- How many unique Gregorian calendars are there? Seems to repeat every 28 years

- Interesting code snippets (DRAFT-code-snippets.txt)

- Similar to interesting code snippets: these effects such as dissolving comet-like tail: https://twitter.com/blinry/status/1467112486952443907?s=20


- Trippy Mandelbrot
[Code]
      - I'm playing with making an infinitely zooming mandelbrot animation based on https://oneshader.net/shader/6a54c2c771
      ===
#version 300 es
#define pi 3.1415926
precision highp float;

uniform float iTime;
uniform vec2  iResolution;

out vec4 fragColor;

vec2 vpow2(vec2 v){
    return vec2(v.x * v.x - v.y * v.y, 2. * v.x * v.y);
}

vec2 rv(vec2 v, float r){
    float a = atan(v.y, v.x);
    //a += r;
    return vec2(cos(a), sin(a)) * length(v);
}

float itr(vec2 c, vec2 z){
    int i = 0;
    
    while(length(z) < 8192. && i < 512){
        z = vpow2(z) + c;
        i++;
    }
    
    return float(i) + 1. - log(log(length(z))) / log(2.);
}

vec3 fcol(float it){
    if(it < 512.){
        return vec3(.1 + .1 * sin(it / 32.), .1 + .5 * sin(it / 48.), .1 + .9 * sin(it / 64.));
    }
    else{
        return vec3(0., 0., 0.);
    }
}

void main() {
    // Screen coordinate (from [-aspect, -1] to [aspect, 1])
    vec2 q   = (2. * gl_FragCoord.xy - iResolution) / iResolution.y;
    
    float mzoom = 1.e5;
    float ztime = log(mzoom) / log(2.);
    float zoom = pow(2., mod(iTime, ztime));
    float zphase = mod(iTime / ztime, 1.);
    float r = (4. * pi - 4.04) * zphase;
    
    vec2 fractalCoord = vec2(-0.13791936640142570099292214925261, -0.88460568100304538057472153704150);
    vec2 c = rv(q * (mzoom / 1.e5) / zoom, r) + fractalCoord;
    vec2 c2 = rv(q * mzoom / zoom, r + 4.04) + fractalCoord;
    vec2 z = vec2(0., 0.);
    
    float it = itr(c, z);
    float it2 = itr(c2, z);
    
    // Pixel color
    vec3 col;
    vec3 col2;
    float w = pow(zphase, 0.9);
    col = fcol(it) * (1. - w) * clamp(1. - .2 * it2, 0., 1.);
    col += fcol(it2) * w;
    
    // Output
    fragColor = vec4(col, 1.);
}
      ===

I took the color calculation from viz-intelligence's mandelbrot and got something extremely trippy:
===
#version 300 es
#define pi 3.1415926
precision highp float;

uniform float iTime;
uniform vec2  iResolution;

out vec4 fragColor;

vec2 vpow2(vec2 v){
    return vec2(v.x * v.x - v.y * v.y, 2. * v.x * v.y);
}

vec2 rv(vec2 v, float r){
    float a = atan(v.y, v.x);
    //a += r;
    return vec2(cos(a), sin(a)) * length(v);
}

float itr(vec2 c, vec2 z){
    int i = 0;
    
    while(length(z) < 8192. && i < 512){
        z = vpow2(z) + c;
        i++;
    }
    
    return float(i) + 1. - log(log(length(z))) / log(2.);
}

vec3 fcol(float it){
    if(it < 512.){
        //return vec3(.1 + .1 * sin(it / 32.), .1 + .5 * sin(it / 48.), .1 + .9 * sin(it / 64.));
        return vec3(0.5-cos(it*12.0)/1.0,0.5-cos(it*13.0)/2.0,0.5-cos(it*23.0)/2.0);
    }
    else{
        return vec3(0., 0., 0.);
    }
}

void main() {
    // Screen coordinate (from [-aspect, -1] to [aspect, 1])
    vec2 q   = (2. * gl_FragCoord.xy - iResolution) / iResolution.y;
    
    float mzoom = 1.e5;
    float ztime = log(mzoom) / log(2.);
    float zoom = pow(2., mod(iTime, ztime));
    float zphase = mod(iTime / ztime, 1.);
    float r = (4. * pi - 4.04) * zphase;
    
    vec2 fractalCoord = vec2(-0.13791936640142570099292214925261, -0.88460568100304538057472153704150);
    vec2 c = rv(q * (mzoom / 1.e5) / zoom, r) + fractalCoord;
    vec2 c2 = rv(q * mzoom / zoom, r + 4.04) + fractalCoord;
    vec2 z = vec2(0., 0.);
    
    float it = itr(c, z);
    float it2 = itr(c2, z);
    
    // Pixel color
    vec3 col;
    vec3 col2;
    float w = pow(zphase, 0.9);
    col = fcol(it) * (1. - w) * clamp(1. - .2 * it2, 0., 1.);
    col += fcol(it2) * w;
    
    // Output
    fragColor = vec4(col, 1.);
}
===
[/Code]

- More trippy art:
  - https://mobile.twitter.com/zozuar/status/1612919479582728232
    - https://twigl.app/?ol=true&mode=7&source=for(float%20i,g,e,R,S%3Bi%2B%2B%3C1e2%3Bo.rgb%2B%3Dhsv(.4-.02/R,(e%3Dmax(e*R*1e4,.7)),.03/exp(e)))%7BS%3D1.%3Bvec3%20p%3Dvec3((FC.xy/r-.5)*g,g-.3)-i/2e5%3Bp.yz*%3Drotate2D(.3)%3Bfor(p%3Dvec3(log(R%3Dlength(p))-t,e%3Dasin(-p.z/R)-.1/R,atan(p.x,p.y)*3.)%3BS%3C1e2%3BS%2B%3DS)e%2B%3Dpow(abs(dot(sin(p.yxz*S),cos(p*S))),.2)/S%3Bg%2B%3De*R*.1%3B%7D
  - https://genart.social/@ylegall/109905874394139047



- List of tools for making IF:
  https://adventuron.io/
    - Games made with Adventuron: https://itch.io/c/790679/adventuron-games
  Quest (and its peer made by the same group)
  Twine
  TADS
  Inform
  Linus Akesson’s system
  Custom engine (like mine) 
  Swords
  https://itch.io/tools/tag-interactive-fiction
  Browse r/interactivefiction for others 
  Look at development systems section: https://en.wikipedia.org/wiki/Interactive_fiction
  https://tajmone.github.io/awesome-interactive-fiction/
  https://github.com/tajmone/awesome-interactive-fiction
  https://www.google.com/search?q=list+of+interactive+fiction+development+systems&client=safari&sxsrf=ALeKk02AjE2Gg_9H_K_mVf7_kLd4e9gWmw%3A1616488462941&source=hp&ei=DqhZYNGdN5iq0PEPieajCA&iflsig=AINFCbYAAAAAYFm2Hlr_knE_pyfeB-mf6Y9lpyH3GMX9&oq=list+of+interactive+fiction+development+systems&gs_lcp=Cgdnd3Mtd2l6EAM6BwgjEOoCECc6BAgjECc6BQgAEJECOgUIABCxAzoLCC4QsQMQxwEQowI6CAguELEDEIMBOggILhDHARCjAjoCCAA6BQguELEDOgIILjoICAAQsQMQyQM6BQgAEMkDOgYIABAWEB46CAghEBYQHRAeOgUIIRCgAToFCCEQqwI6BwghEAoQoAFQmhlYhnZgundoAXAAeACAAX6IAeMekgEENDIuNZgBAKABAaoBB2d3cy13aXqwAQo&sclient=gws-wiz&ved=0ahUKEwjR3PXkgMbvAhUYFTQIHQnzCAEQ4dUDCAw&uact=5&safari_group=9
  http://www.ifwiki.org/index.php/Engine_List
  https://emshort.blog/how-to-play/writing-if/
  https://emshort.blog/2021/03/31/end-of-march-link-assortment-5/
  
  - Also check out Gruescript:
    - Makes LAIF, example: https://versificator.itch.io/the-party-line
    https://versificator.itch.io/gruescript
    https://ifdb.org/viewgame?id=zke2u3fliyl2151
    https://intfiction.org/t/announce-gruescript/52104/54
    
  - Sort of LAIF: Seltani
    https://emshort.blog/2015/05/25/writing-for-seltani-in-general/
    https://ifdb.org/search?searchbar=seltani
    http://seltani.net/about
  