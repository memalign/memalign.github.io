- Backing everything up on SSDs, storing them in a fireproof folder, using rsync
- JavaScriptCore, Scriptable, little utilities, useful for a Swiss Army knife app
- SiteGenerator
- Vision framework
  
- Graphics in javascript:
  - https://play.ertdfgcvb.xyz/
  - https://www.dwitter.net/
  - http://pixelverse.org/experiments/natsukashii/
  - https://bbcmic.ro/?experimental=true&#
  
- Graphs in JavaScript: https://github.com/vega/vega-lite
- Syntax highlighting in JavaScript: https://prismjs.com/
- PalmOS emulator: https://cloudpilot-emu.github.io/app/#/tab/emulation
  
- Make your own Muncher game (input a file, get a munchers game; have a listing of sample ones)

- 101 Zen Stories, put in a maze like memalign dungeon: https://nkanaev.com/zen101/en/

- Make memes, mock up UI in Keynote

- Make font in js: https://brutalita.com/

- Similar Songs Jukebox: use Spotify, Apple Music, or YouTube to play similar songs back-to-back

- Generated art
  - https://github.com/google/deepdream/blob/master/dream.ipynb
  - https://twitter.com/sportsracer48?s=20&t=O1ABZqjOT03HXA5InI9HOQ
  - https://github.com/sportsracer48/pytti
  - This is human-made but has a similar feel: https://zoomquilt.org/
  - https://jxmo.notion.site/The-Weird-and-Wonderful-World-of-AI-Art-b9615a2e7278435b98380ff81ae1cf09
    - HN post about this: https://news.ycombinator.com/item?id=31121890
  - https://rybakov.com/project/metamorphosis/
  - https://creator.nightcafe.studio/my-creations
  
  
- More PICO-8 games
  - Holiday Jumper by zep: https://www.lexaloffle.com/bbs/?tid=45856
  - https://www.lexaloffle.com/bbs/?tid=46495
  - Tomb of G'Nir (hard platformer): https://www.lexaloffle.com/bbs/?tid=31258#comments
  - UFO Swamp Odyssey: https://www.lexaloffle.com/bbs/?tid=38153#playing - very charming and fun
  - https://www.lexaloffle.com/bbs/?tid=34047#playing - Another Paranoid Cactus game. Turn-based strategy called "Shadows of Dunwich 2.0". Good example of the mechanic but I found it tedious after a few rounds.
  - Putrid S4nd: https://abhimonk.itch.io/putrid-s4nd - shoot-em-up with roguelike elements
  - https://nusan.itch.io/flooded-caves
  - https://www.lexaloffle.com/bbs/?tid=2514#playing

- JavaScript games:
  - https://github.com/DennisBengs/envisionator
    - https://donitz.itch.io/envisionator
    - This is the game with a robot you control by giving movement commands
  - https://github.com/DennisBengs/retrohaunt (by the same guy as Envisionator)
  - http://lalo.li/ddd/
  - http://lalo.li/lsd/
  - Chroma Incident: https://js13kgames.com/entries/the-chroma-incident https://github.com/Rybar/js13k2018
    - https://js13kgames.com/games/greeble/index.html
      - I like the idea of a robot needing to rebuild itself but the implementation is buggy (too easy to get stuck and have to reload) and the game feels too incomplete
  - Space Garden: https://js13kgames.com/entries/space-garden ; Relaxing, a lot more fun than Asteroids, but no win/end condition
  - https://www.lessmilk.com/almost-pong/
  - Simplified Quake: https://phoboslab.org/q1k3/
  
- https://1j01.github.io/pbp2d/
  - New URL: https://1j01.github.io/pbj-sandbox/

- Free game assets: https://www.kenney.nl/assets/

- Ray tracing
  - https://github.com/iechevarria/ray-tracer-js
  - add a rectangle (which I think just combines two triangles - see how the included scene makes its walls)
  - add a more complex shape: cylinder or torus

- https://freeicons.io/

- https://cube.zxh.io/
  - backed up in ~/rubikscube
  - add some patterns

- Expand on what I noted in 00020-product-reviews.txt about reading and writing outside of school (pressures of grades, learning how to think, pursuing things that are more interesting than the curriculum, etc)
  - Why I wanted to write about Tim's Vermeer but didn't want to write about so many books we read in school

- How many unique Gregorian calendars are there? Seems to repeat every 28 years

- Interesting code snippets:
  - Seedable random number generator: https://github.com/phoboslab/underrun/blob/master/source/random.js
[Code]
var rand_high, rand_low;

function random_int(min, max) {
	rand_high = ((rand_high << 16) + (rand_high >> 16) + rand_low) & 0xffffffff;
	rand_low = (rand_low + rand_high) & 0xffffffff;
	var n = (rand_high >>> 0) / 0xffffffff;
	return (min + n * (max-min+1))|0;
}

function random_seed(seed) {
	rand_high = seed || 0xBADC0FFE;
	rand_low = seed ^ 0x49616E42;
}
[/Code]
  - My Runloop.js
[Code]
class MARunloopEvent {
  // Properties:
  // - fnToRun (function)
  // - secondsToWait (float, seconds to wait (can be fractional) before executing fnToRun)
  constructor(fnToRun, secondsToWait) {
    this.fnToRun = fnToRun
    this.secondsToWait = secondsToWait
  }
}

class MARunloop {
  // Properties:
  // - scheduledEvents (array of MARunloopEvent instances)
  constructor() {
    this.scheduledEvents = []
    this.runloopTimerScheduledTimeMillis = null
  }

  runFunctionAfterDelay(fnToRun, delayInSeconds) {
    // The events already in the queue have a delayInSeconds value for time that has already elapsed since the runloop timer was scheduled
    // When the timer fires, we will subtract the number of seconds that elapsed since it was scheduled
    // To wait the full intended delayInSeconds, we need to artificially add the time that already elapsed before this event is being enqueued.
    if (this.runloopTimerScheduledTimeMillis) {
      let now = Date.now()
      let delta = now - this.runloopTimerScheduledTimeMillis
      if (delta > 0) {
        // To have the same time basis as the other events in the queue
        // backdate our delayInSeconds based on the timer that's already scheduled
        delayInSeconds += delta/1000
      }
    }
    let rEvent = new MARunloopEvent(fnToRun, delayInSeconds)
    this.scheduledEvents.push(rEvent)
    this.scheduleRunloopTimerIfNecessary()
  }

  runloopTimerFired() {
    let eventsToRun = []
    if (this.runloopTimerScheduledTimeMillis) {

      let now = Date.now()
      let delta = now - this.runloopTimerScheduledTimeMillis
      if (delta > 0) {
        for (let rEvent of this.scheduledEvents) {
          rEvent.secondsToWait -= delta/1000
        }

        // Sort from smallest to largest seconds to wait (so most negative will be first)
        eventsToRun = this.scheduledEvents.filter(x => x.secondsToWait <= 0).sort((a, b) => a.secondsToWait - b.secondsToWait)

        this.scheduledEvents = this.scheduledEvents.filter(x => x.secondsToWait > 0)
      }

      this.runloopTimerScheduledTimeMillis = null
    }

    this.scheduleRunloopTimerIfNecessary()

    for (let rEvent of eventsToRun) {
      rEvent.fnToRun()
    }
  }

  scheduleRunloopTimerIfNecessary() {
    if (this.scheduledEvents.length <= 0) {
      return
    }
    // Pick the smallest secondsToWait and then schedule a timer
    // Before scheduling a new timer, I could be more clever about checking whether the timer that's already scheduled will fire soon enough for the ripest event but I figure that extra efficiency isn't worth the risk of a subtle bug
    let smallestSecondsToWait = this.scheduledEvents[0].secondsToWait
    for (let rEvent of this.scheduledEvents) {
      if (rEvent.secondsToWait < smallestSecondsToWait) {
        smallestSecondsToWait = rEvent.secondsToWait
      }
    }

    if (this.runloopTimerScheduledTimeMillis) {
      let now = Date.now()
      let deltaMillis = now - this.runloopTimerScheduledTimeMillis
      if (deltaMillis > 0) {
        smallestSecondsToWait = Math.max(0.001, smallestSecondsToWait-deltaMillis)
      }
    }

    // The secondsToWait are based on when the timer was originally scheduled
    // Keep the same time basis if a timer was already scheduled
    if (!this.runloopTimerScheduledTimeMillis) {
      this.runloopTimerScheduledTimeMillis = Date.now()
    }

    let rl = this
    setTimeout(function() {
      rl.runloopTimerFired()
    }, smallestSecondsToWait*1000)
  }
}
[/Code]

- Similar to interesting code snippets: these effects such as dissolving comet-like tail: https://twitter.com/blinry/status/1467112486952443907?s=20


- List of tools for making IF:
  https://adventuron.io/
  Quest (and its peer made by the same group)
  Twine
  TADS
  Inform
  Linus Akessonâ€™s system
  Custom engine (like mine) 
  Swords
  Browse r/interactivefiction for others 
  Look at development systems section: https://en.wikipedia.org/wiki/Interactive_fiction
  https://tajmone.github.io/awesome-interactive-fiction/
  https://github.com/tajmone/awesome-interactive-fiction
  https://www.google.com/search?q=list+of+interactive+fiction+development+systems&client=safari&sxsrf=ALeKk02AjE2Gg_9H_K_mVf7_kLd4e9gWmw%3A1616488462941&source=hp&ei=DqhZYNGdN5iq0PEPieajCA&iflsig=AINFCbYAAAAAYFm2Hlr_knE_pyfeB-mf6Y9lpyH3GMX9&oq=list+of+interactive+fiction+development+systems&gs_lcp=Cgdnd3Mtd2l6EAM6BwgjEOoCECc6BAgjECc6BQgAEJECOgUIABCxAzoLCC4QsQMQxwEQowI6CAguELEDEIMBOggILhDHARCjAjoCCAA6BQguELEDOgIILjoICAAQsQMQyQM6BQgAEMkDOgYIABAWEB46CAghEBYQHRAeOgUIIRCgAToFCCEQqwI6BwghEAoQoAFQmhlYhnZgundoAXAAeACAAX6IAeMekgEENDIuNZgBAKABAaoBB2d3cy13aXqwAQo&sclient=gws-wiz&ved=0ahUKEwjR3PXkgMbvAhUYFTQIHQnzCAEQ4dUDCAw&uact=5&safari_group=9
  http://www.ifwiki.org/index.php/Engine_List
  https://emshort.blog/how-to-play/writing-if/
  https://emshort.blog/2021/03/31/end-of-march-link-assortment-5/
  
  - Also check out Gruescript:
    https://versificator.itch.io/gruescript
    https://ifdb.org/viewgame?id=zke2u3fliyl2151
    https://intfiction.org/t/announce-gruescript/52104/54
    
  - Sort of LAIF: Seltani
    https://emshort.blog/2015/05/25/writing-for-seltani-in-general/
    https://ifdb.org/search?searchbar=seltani
    http://seltani.net/about
  